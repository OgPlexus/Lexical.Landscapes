
# coding: utf-8

# # On All 1-Grams

# In[1]:


get_ipython().run_cell_magic('time', '', "\n### Initializations ---------------------------------------------------------------------\n\nimport re\nimport gc\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n### File Paths Definitions --------------------------------------------------------------\n\nfiles = [\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-a',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-b',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-c',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-d',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-e',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-f',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-g',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-h',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-i',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-j',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-k',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-l',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-m',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-n',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-o',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-p',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-q',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-r',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-s',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-t',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-u',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-v',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-w',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-x',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-y',\\\n         r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\googlebooks-eng-all-1gram-20120701-z'\\\n        ]\n\n### Set Word Length -----------------------------------------------------------\n\nWORDLEN = 7\n\n\n### Import / Clean 'A' 1-Grams -----------------------------------------------------------\n\ndfA = pd.read_csv(files[0],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfA.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfA.index.name = 'OneGram Count'\ndfA = dfA.drop(labels='Volume Count', axis=1)\n\ndfA['OneGram'] = dfA['OneGram'].astype(str)\n\ndfA = dfA.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfA['OneGram'] = dfA['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfA['OneGram'] = dfA['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfA['OneGram'] = dfA['OneGram'].apply(ltrim)\n\ndfA = dfA[dfA.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfA['OneGram'] = dfA['OneGram'].apply(UpUp)\n\ndfA = dfA.reset_index(drop =True)\n\n\n### Import / Clean 'B' 1-Grams -----------------------------------------------------------\n\ndfB = pd.read_csv(files[1],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfB.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfB.index.name = 'OneGram Count'\ndfB = dfB.drop(labels='Volume Count', axis=1)\n\ndfB['OneGram'] = dfB['OneGram'].astype(str)\n\ndfB = dfB.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfB['OneGram'] = dfB['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfB['OneGram'] = dfB['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfB['OneGram'] = dfB['OneGram'].apply(ltrim)\n\ndfB = dfB[dfB.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfB['OneGram'] = dfB['OneGram'].apply(UpUp)\n\ndfB = dfB.reset_index(drop =True)\n\n\n### Import / Clean 'C' 1-Grams -----------------------------------------------------------\n\ndfC = pd.read_csv(files[2],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfC.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfC.index.name = 'OneGram Count'\ndfC = dfC.drop(labels='Volume Count', axis=1)\n\ndfC['OneGram'] = dfC['OneGram'].astype(str)\n\ndfC = dfC.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfC['OneGram'] = dfC['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfC['OneGram'] = dfC['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfC['OneGram'] = dfC['OneGram'].apply(ltrim)\n\ndfC = dfC[dfC.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfC['OneGram'] = dfC['OneGram'].apply(UpUp)\n\ndfC = dfC.reset_index(drop =True)\n\n\n### Import / Clean 'D' 1-Grams -----------------------------------------------------------\n\ndfD = pd.read_csv(files[3],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfD.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfD.index.name = 'OneGram Count'\ndfD = dfD.drop(labels='Volume Count', axis=1)\n\ndfD['OneGram'] = dfD['OneGram'].astype(str)\n\ndfD = dfD.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfD['OneGram'] = dfD['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfD['OneGram'] = dfD['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfD['OneGram'] = dfD['OneGram'].apply(ltrim)\n\ndfD = dfD[dfD.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfD['OneGram'] = dfD['OneGram'].apply(UpUp)\n\ndfD = dfD.reset_index(drop =True)\n\n\n### Import / Clean 'E' 1-Grams -----------------------------------------------------------\n\ndfE = pd.read_csv(files[4],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfE.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfE.index.name = 'OneGram Count'\ndfE = dfE.drop(labels='Volume Count', axis=1)\n\ndfE['OneGram'] = dfE['OneGram'].astype(str)\n\ndfE = dfE.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfE['OneGram'] = dfE['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfE['OneGram'] = dfE['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfE['OneGram'] = dfE['OneGram'].apply(ltrim)\n\ndfE = dfE[dfE.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfE['OneGram'] = dfE['OneGram'].apply(UpUp)\n\ndfE = dfE.reset_index(drop =True)\n\n\n### Import / Clean 'F' 1-Grams -----------------------------------------------------------\n\ndfF = pd.read_csv(files[5],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfF.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfF.index.name = 'OneGram Count'\ndfF = dfF.drop(labels='Volume Count', axis=1)\n\ndfF['OneGram'] = dfF['OneGram'].astype(str)\n\ndfF = dfF.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfF['OneGram'] = dfF['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfF['OneGram'] = dfF['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfF['OneGram'] = dfF['OneGram'].apply(ltrim)\n\ndfF = dfF[dfF.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfF['OneGram'] = dfF['OneGram'].apply(UpUp)\n\ndfF = dfF.reset_index(drop =True)\n\n\n### Import / Clean 'G' 1-Grams -----------------------------------------------------------\n\ndfG = pd.read_csv(files[6],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfG.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfG.index.name = 'OneGram Count'\ndfG = dfG.drop(labels='Volume Count', axis=1)\n\ndfG['OneGram'] = dfG['OneGram'].astype(str)\n\ndfG = dfG.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfG['OneGram'] = dfG['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfG['OneGram'] = dfG['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfG['OneGram'] = dfG['OneGram'].apply(ltrim)\n\ndfG = dfG[dfG.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfG['OneGram'] = dfG['OneGram'].apply(UpUp)\n\ndfG = dfG.reset_index(drop =True)\n\n\n### Import / Clean 'H' 1-Grams -----------------------------------------------------------\n\ndfH = pd.read_csv(files[7],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfH.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfH.index.name = 'OneGram Count'\ndfH = dfH.drop(labels='Volume Count', axis=1)\n\ndfH['OneGram'] = dfH['OneGram'].astype(str)\n\ndfH = dfH.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfH['OneGram'] = dfH['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfH['OneGram'] = dfH['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfH['OneGram'] = dfH['OneGram'].apply(ltrim)\n\ndfH = dfH[dfH.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfH['OneGram'] = dfH['OneGram'].apply(UpUp)\n\ndfH = dfH.reset_index(drop =True)\n\n\n### Import / Clean 'I' 1-Grams -----------------------------------------------------------\n\ndfI = pd.read_csv(files[8],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfI.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfI.index.name = 'OneGram Count'\ndfI = dfI.drop(labels='Volume Count', axis=1)\n\ndfI['OneGram'] = dfI['OneGram'].astype(str)\n\ndfI = dfI.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfI['OneGram'] = dfI['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfI['OneGram'] = dfI['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfI['OneGram'] = dfI['OneGram'].apply(ltrim)\n\ndfI = dfI[dfI.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfI['OneGram'] = dfI['OneGram'].apply(UpUp)\n\ndfI = dfI.reset_index(drop =True)\n\n\n### Import / Clean 'J' 1-Grams -----------------------------------------------------------\n\ndfJ = pd.read_csv(files[9],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfJ.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfJ.index.name = 'OneGram Count'\ndfJ = dfJ.drop(labels='Volume Count', axis=1)\n\ndfJ['OneGram'] = dfJ['OneGram'].astype(str)\n\ndfJ = dfJ.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfJ['OneGram'] = dfJ['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfJ['OneGram'] = dfJ['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfJ['OneGram'] = dfJ['OneGram'].apply(ltrim)\n\ndfJ = dfJ[dfJ.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfJ['OneGram'] = dfJ['OneGram'].apply(UpUp)\n\ndfJ = dfJ.reset_index(drop =True)\n\n\n### Import / Clean 'K' 1-Grams -----------------------------------------------------------\n\ndfK = pd.read_csv(files[10],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfK.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfK.index.name = 'OneGram Count'\ndfK = dfK.drop(labels='Volume Count', axis=1)\n\ndfK['OneGram'] = dfK['OneGram'].astype(str)\n\ndfK = dfK.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfK['OneGram'] = dfK['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfK['OneGram'] = dfK['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfK['OneGram'] = dfK['OneGram'].apply(ltrim)\n\ndfK = dfK[dfK.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfK['OneGram'] = dfK['OneGram'].apply(UpUp)\n\ndfK = dfK.reset_index(drop =True)\n\n\n### Import / Clean 'L' 1-Grams -----------------------------------------------------------\n\ndfL = pd.read_csv(files[11],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfL.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfL.index.name = 'OneGram Count'\ndfL = dfL.drop(labels='Volume Count', axis=1)\n\ndfL['OneGram'] = dfL['OneGram'].astype(str)\n\ndfL = dfL.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfL['OneGram'] = dfL['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfL['OneGram'] = dfL['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfL['OneGram'] = dfL['OneGram'].apply(ltrim)\n\ndfL = dfL[dfL.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfL['OneGram'] = dfL['OneGram'].apply(UpUp)\n\ndfL = dfL.reset_index(drop =True)\n\n\n### Import / Clean 'M' 1-Grams -----------------------------------------------------------\n\ndfM = pd.read_csv(files[12],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfM.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfM.index.name = 'OneGram Count'\ndfM = dfM.drop(labels='Volume Count', axis=1)\n\ndfM['OneGram'] = dfM['OneGram'].astype(str)\n\ndfM = dfM.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfM['OneGram'] = dfM['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfM['OneGram'] = dfM['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfM['OneGram'] = dfM['OneGram'].apply(ltrim)\n\ndfM = dfM[dfM.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfM['OneGram'] = dfM['OneGram'].apply(UpUp)\n\ndfM = dfM.reset_index(drop =True)\n\n\n### Import / Clean 'N' 1-Grams -----------------------------------------------------------\n\ndfN = pd.read_csv(files[13],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfN.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfN.index.name = 'OneGram Count'\ndfN = dfN.drop(labels='Volume Count', axis=1)\n\ndfN['OneGram'] = dfN['OneGram'].astype(str)\n\ndfN = dfN.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfN['OneGram'] = dfN['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfN['OneGram'] = dfN['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfN['OneGram'] = dfN['OneGram'].apply(ltrim)\n\ndfN = dfN[dfN.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfN['OneGram'] = dfN['OneGram'].apply(UpUp)\n\ndfN = dfN.reset_index(drop =True)\n\n\n### Import / Clean 'O' 1-Grams -----------------------------------------------------------\n\ndfO = pd.read_csv(files[14],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfO.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfO.index.name = 'OneGram Count'\ndfO = dfO.drop(labels='Volume Count', axis=1)\n\ndfO['OneGram'] = dfO['OneGram'].astype(str)\n\ndfO = dfO.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfO['OneGram'] = dfO['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfO['OneGram'] = dfO['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfO['OneGram'] = dfO['OneGram'].apply(ltrim)\n\ndfO = dfO[dfO.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfO['OneGram'] = dfO['OneGram'].apply(UpUp)\n\ndfO = dfO.reset_index(drop =True)\n\n\n### Import / Clean 'P' 1-Grams -----------------------------------------------------------\n\ndfP = pd.read_csv(files[15],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfP.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfP.index.name = 'OneGram Count'\ndfP = dfP.drop(labels='Volume Count', axis=1)\n\ndfP['OneGram'] = dfP['OneGram'].astype(str)\n\ndfP = dfP.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfP['OneGram'] = dfP['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfP['OneGram'] = dfP['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfP['OneGram'] = dfP['OneGram'].apply(ltrim)\n\ndfP = dfP[dfP.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfP['OneGram'] = dfP['OneGram'].apply(UpUp)\n\ndfP = dfP.reset_index(drop =True)\n\n\n### Import / Clean 'Q' 1-Grams -----------------------------------------------------------\n\ndfQ = pd.read_csv(files[16],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfQ.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfQ.index.name = 'OneGram Count'\ndfQ = dfQ.drop(labels='Volume Count', axis=1)\n\ndfQ['OneGram'] = dfQ['OneGram'].astype(str)\n\ndfQ = dfQ.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfQ['OneGram'] = dfQ['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfQ['OneGram'] = dfQ['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfQ['OneGram'] = dfQ['OneGram'].apply(ltrim)\n\ndfQ = dfQ[dfQ.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfQ['OneGram'] = dfQ['OneGram'].apply(UpUp)\n\ndfQ = dfQ.reset_index(drop =True)\n\n\n### Import / Clean 'R' 1-Grams -----------------------------------------------------------\n\ndfR = pd.read_csv(files[17],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfR.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfR.index.name = 'OneGram Count'\ndfR = dfR.drop(labels='Volume Count', axis=1)\n\ndfR['OneGram'] = dfR['OneGram'].astype(str)\n\ndfR = dfR.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfR['OneGram'] = dfR['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfR['OneGram'] = dfR['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfR['OneGram'] = dfR['OneGram'].apply(ltrim)\n\ndfR = dfR[dfR.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfR['OneGram'] = dfR['OneGram'].apply(UpUp)\n\ndfR = dfR.reset_index(drop =True)\n\n\n### Import / Clean 'S' 1-Grams -----------------------------------------------------------\n\ndfS = pd.read_csv(files[18],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfS.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfS.index.name = 'OneGram Count'\ndfS = dfS.drop(labels='Volume Count', axis=1)\n\ndfS['OneGram'] = dfS['OneGram'].astype(str)\n\ndfS = dfS.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfS['OneGram'] = dfS['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfS['OneGram'] = dfS['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfS['OneGram'] = dfS['OneGram'].apply(ltrim)\n\ndfS = dfS[dfS.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfS['OneGram'] = dfS['OneGram'].apply(UpUp)\n\ndfS = dfS.reset_index(drop =True)\n\n\n### Import / Clean 'T' 1-Grams -----------------------------------------------------------\n\ndfT = pd.read_csv(files[19],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfT.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfT.index.name = 'OneGram Count'\ndfT = dfT.drop(labels='Volume Count', axis=1)\n\ndfT['OneGram'] = dfT['OneGram'].astype(str)\n\ndfT = dfT.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfT['OneGram'] = dfT['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfT['OneGram'] = dfT['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfT['OneGram'] = dfT['OneGram'].apply(ltrim)\n\ndfT = dfT[dfT.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfT['OneGram'] = dfT['OneGram'].apply(UpUp)\n\ndfT = dfT.reset_index(drop =True)\n\n\n### Import / Clean 'U' 1-Grams -----------------------------------------------------------\n\ndfU = pd.read_csv(files[20],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfU.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfU.index.name = 'OneGram Count'\ndfU = dfU.drop(labels='Volume Count', axis=1)\n\ndfU['OneGram'] = dfU['OneGram'].astype(str)\n\ndfU = dfU.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfU['OneGram'] = dfU['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfU['OneGram'] = dfU['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfU['OneGram'] = dfU['OneGram'].apply(ltrim)\n\ndfU = dfU[dfU.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfU['OneGram'] = dfU['OneGram'].apply(UpUp)\n\ndfU = dfU.reset_index(drop =True)\n\n\n### Import / Clean 'V' 1-Grams -----------------------------------------------------------\n\ndfV = pd.read_csv(files[21],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfV.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfV.index.name = 'OneGram Count'\ndfV = dfV.drop(labels='Volume Count', axis=1)\n\ndfV['OneGram'] = dfV['OneGram'].astype(str)\n\ndfV = dfV.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfV['OneGram'] = dfV['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfV['OneGram'] = dfV['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfV['OneGram'] = dfV['OneGram'].apply(ltrim)\n\ndfV = dfV[dfV.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfV['OneGram'] = dfV['OneGram'].apply(UpUp)\n\ndfV = dfV.reset_index(drop =True)\n\n\n### Import / Clean 'W' 1-Grams -----------------------------------------------------------\n\ndfW = pd.read_csv(files[22],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfW.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfW.index.name = 'OneGram Count'\ndfW = dfW.drop(labels='Volume Count', axis=1)\n\ndfW['OneGram'] = dfW['OneGram'].astype(str)\n\ndfW = dfW.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfW['OneGram'] = dfW['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfW['OneGram'] = dfW['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfW['OneGram'] = dfW['OneGram'].apply(ltrim)\n\ndfW = dfW[dfW.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfW['OneGram'] = dfW['OneGram'].apply(UpUp)\n\ndfW = dfW.reset_index(drop =True)\n\n\n### Import / Clean 'X' 1-Grams -----------------------------------------------------------\n\ndfX = pd.read_csv(files[23],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfX.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfX.index.name = 'OneGram Count'\ndfX = dfX.drop(labels='Volume Count', axis=1)\n\ndfX['OneGram'] = dfX['OneGram'].astype(str)\n\ndfX = dfX.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfX['OneGram'] = dfX['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfX['OneGram'] = dfX['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfX['OneGram'] = dfX['OneGram'].apply(ltrim)\n\ndfX = dfX[dfX.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfX['OneGram'] = dfX['OneGram'].apply(UpUp)\n\ndfX = dfX.reset_index(drop =True)\n\n\n### Import / Clean 'Y' 1-Grams -----------------------------------------------------------\n\ndfY = pd.read_csv(files[24],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfY.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfY.index.name = 'OneGram Count'\ndfY = dfY.drop(labels='Volume Count', axis=1)\n\ndfY['OneGram'] = dfY['OneGram'].astype(str)\n\ndfY = dfY.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfY['OneGram'] = dfY['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfY['OneGram'] = dfY['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfY['OneGram'] = dfY['OneGram'].apply(ltrim)\n\ndfY = dfY[dfY.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfY['OneGram'] = dfY['OneGram'].apply(UpUp)\n\ndfY = dfY.reset_index(drop =True)\n\n\n### Import / Clean 'Z' 1-Grams -----------------------------------------------------------\n\ndfZ = pd.read_csv(files[25],sep ='\\t', lineterminator ='\\n',header =None)\n\ndfZ.columns = ['OneGram', 'Year', 'Count', 'Volume Count']\ndfZ.index.name = 'OneGram Count'\ndfZ = dfZ.drop(labels='Volume Count', axis=1)\n\ndfZ['OneGram'] = dfZ['OneGram'].astype(str)\n\ndfZ = dfZ.reset_index(drop =True)\n\ndef cutter(s):\n    head, sep, tail = s.partition('_')\n    return(head)\n\ndfZ['OneGram'] = dfZ['OneGram'].apply(cutter)\n\ndef letrdrop(s):\n    if re.match('^[a-zA-Z]+$', s):\n        return(s)\n    else:\n        s = int(0)\n        return(s)\n\ndfZ['OneGram'] = dfZ['OneGram'].apply(letrdrop)\n\ndef ltrim(s):\n    if isinstance(s, int) == True:\n        return(s)\n    elif len(s) != WORDLEN:\n        s = int(0)\n        return(s)\n    else:\n        return(s)\n\ndfZ['OneGram'] = dfZ['OneGram'].apply(ltrim)\n\ndfZ = dfZ[dfZ.OneGram != 0]\n\ndef UpUp(s):\n    Done = s.upper()\n    return(Done)\n\ndfZ['OneGram'] = dfZ['OneGram'].apply(UpUp)\n\ndfZ = dfZ.reset_index(drop =True)\n\n\n\n\n### Merging / Concatination --------------------------------------------------------------\n\ndfList = [\\\n          dfA,\\\n          dfB,\\\n          dfC,\\\n          dfD,\\\n          dfE,\\\n          dfF,\\\n          dfG,\\\n          dfH,\\\n          dfI,\\\n          dfJ,\\\n          dfK,\\\n          dfL,\\\n          dfM,\\\n          dfN,\\\n          dfO,\\\n          dfP,\\\n          dfQ,\\\n          dfR,\\\n          dfS,\\\n          dfT,\\\n          dfU,\\\n          dfV,\\\n          dfW,\\\n          dfX,\\\n          dfY,\\\n          dfZ\\\n         ]\n\ndfAll = pd.concat([\\\n                   dfList[0],\\\n                   dfList[1],\\\n                   dfList[2],\\\n                   dfList[3],\\\n                   dfList[4],\\\n                   dfList[5],\\\n                   dfList[6],\\\n                   dfList[7],\\\n                   dfList[8],\\\n                   dfList[9],\\\n                   dfList[10],\\\n                   dfList[11],\\\n                   dfList[12],\\\n                   dfList[13],\\\n                   dfList[14],\\\n                   dfList[15],\\\n                   dfList[16],\\\n                   dfList[17],\\\n                   dfList[18],\\\n                   dfList[19],\\\n                   dfList[20],\\\n                   dfList[21],\\\n                   dfList[22],\\\n                   dfList[23],\\\n                   dfList[24],\\\n                   dfList[25]\\\n                  ], ignore_index=True)\n\n\n        \n### Trying To Clear Some Python 'Memory' Up --------------------------------------------------------------\n\ndel files\ndel dfList\n    \ndel [[dfA,\\\n      dfB,\\\n      dfC,\\\n      dfD,\\\n      dfE,\\\n      dfF,\\\n      dfG,\\\n      dfH,\\\n      dfI,\\\n      dfJ,\\\n      dfK,\\\n      dfL,\\\n      dfM,\\\n      dfN,\\\n      dfO,\\\n      dfP,\\\n      dfQ,\\\n      dfR,\\\n      dfS,\\\n      dfT,\\\n      dfU,\\\n      dfV,\\\n      dfW,\\\n      dfX,\\\n      dfY,\\\n      dfZ\\\n     ]]\n\ngc.collect()\n\ndfA = pd.DataFrame()\ndfB = pd.DataFrame()\ndfC = pd.DataFrame()\ndfD = pd.DataFrame()\ndfE = pd.DataFrame()\ndfF = pd.DataFrame()\ndfG = pd.DataFrame()\ndfH = pd.DataFrame()\ndfI = pd.DataFrame()\ndfJ = pd.DataFrame()\ndfK = pd.DataFrame()\ndfL = pd.DataFrame()\ndfM = pd.DataFrame()\ndfN = pd.DataFrame()\ndfO = pd.DataFrame()\ndfP = pd.DataFrame()\ndfQ = pd.DataFrame()\ndfR = pd.DataFrame()\ndfS = pd.DataFrame()\ndfT = pd.DataFrame()\ndfU = pd.DataFrame()\ndfV = pd.DataFrame()\ndfW = pd.DataFrame()\ndfX = pd.DataFrame()\ndfY = pd.DataFrame()\ndfZ = pd.DataFrame()\n\n\n### Results Results This Sloppy Code Has Results ---------------------------------------------------------\n\ndfAll           ### Wall time: 59min 30s")


# In[2]:


get_ipython().run_cell_magic('time', '', "\n### Final Convert, Clean, & Save --------------------------------------------------------------------------\n\n# dfAll = dfAll.set_index(['OneGram', 'Year'], append=True).unstack()\n# dfAll = dfAll.fillna(0.0)\n# dfAll = dfAll.groupby(['OneGram']).sum() \n\ndfAll = dfAll.pivot_table(values = 'Count',\\\n                      columns = 'Year',\\\n                      index ='OneGram',\\\n                      fill_value =0,\\\n                      aggfunc=np.sum\\\n                     ).astype(int)\n\n# a = np.linspace(1700,2000,31)\n# a\n\ndfAll = dfAll[[1900., 1902., 1904., 1906., 1908., 1910., 1912., 1914., 1916.,\n               1918., 1920., 1922., 1924., 1926., 1928., 1930., 1932., 1934.,\n               1936., 1938., 1940., 1942., 1944., 1946., 1948., 1950., 1952.,\n               1954., 1956., 1958., 1960., 1962., 1964., 1966., 1968., 1970.,\n               1972., 1974., 1976., 1978., 1980., 1982., 1984., 1986., 1988.,\n               1990., 1992., 1994., 1996., 1998., 2000.]]\n\ndfAll['Total'] = dfAll.sum(axis=1)\ndfAll = dfAll.sort_values(by='Total', ascending=False)\n# dfAll = dfAll.reset_index()\n# dfAll = dfAll[dfAll.index <= 5000]\ndfAll = dfAll.drop(['Total'], axis=1)\n\ndfAll.to_csv(r'C:\\Users\\Victor\\Desktop\\1 Gram Data\\The Array.csv')\n\ndfAll      ### Wall time: 9min 42s")


# In[ ]:


### Some Basic Analysis Step 1 --------------------------------------------------------------------------------

for dtype in ['float','int','object']:
    selected_dtype = dfAll.select_dtypes(include=[dtype])
    mean_usage_b = selected_dtype.memory_usage(deep=True).mean()
    mean_usage_mb = mean_usage_b / 1024 ** 2
    print("Average memory usage for {} columns: {:03.2f} MB".format(dtype,mean_usage_mb))

dfAll.info(memory_usage='deep')

len(dfAll.OneGram.unique())

dfAll.describe()


# In[ ]:


### Some Basic Analysis Step 2 --------------------------------------------------------------------------------

for dtype in ['float','int','object']:
    selected_dtype = dfAll.select_dtypes(include=[dtype])
    mean_usage_b = selected_dtype.memory_usage(deep=True).mean()
    mean_usage_mb = mean_usage_b / 1024 ** 2
    print("Average memory usage for {} columns: {:03.2f} MB".format(dtype,mean_usage_mb))

dfAll.info(memory_usage='deep')

#len(dfAll.OneGram.unique())

dfAll.describe()


# # Just On X 1-Grams

# In[ ]:


import re
import gc
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

files = [         r'C:\Users\Victor\Desktop\1 Gram Data\googlebooks-eng-all-1gram-20120701-x',        ]

WORDLEN = 4

dfX = pd.read_csv(files[0],sep ='\t', lineterminator ='\n',header =None)

dfX.columns = ['OneGram', 'Year', 'Count', 'Volume Count']
dfX.index.name = 'OneGram Count'
dfX = dfX.drop(labels='Volume Count', axis=1)

dfX['OneGram'] = dfX['OneGram'].astype(str)

dfX = dfX.reset_index(drop =True)

def cutter(s):
    head, sep, tail = s.partition('_')
    return(head)

dfX['OneGram'] = dfX['OneGram'].apply(cutter)

def letrdrop(s):
    if re.match('^[a-zA-Z]+$', s):
        return(s)
    else:
        s = int(0)
        return(s)

dfX['OneGram'] = dfX['OneGram'].apply(letrdrop)

def ltrim(s):
    if isinstance(s, int) == True:
        return(s)
    elif len(s) != WORDLEN:
        s = int(0)
        return(s)
    else:
        return(s)

dfX['OneGram'] = dfX['OneGram'].apply(ltrim)

dfX = dfX[dfX.OneGram != 0]

def UpUp(s):
    Done = s.upper()
    return(Done)

dfX['OneGram'] = dfX['OneGram'].apply(UpUp)

dfX = dfX.reset_index(drop =True)

dfX


# In[ ]:


# dfX = dfX.set_index(['OneGram', 'Year'], append=True).unstack()
# dfX = dfX.fillna(0.0)
# dfX = dfX.groupby(['OneGram']).sum() 

dfX = dfX.pivot_table(values = 'Count',                      columns = 'Year',                      index ='OneGram',                      fill_value =0,                      aggfunc=np.sum                     ).astype(int)

# a = np.linspace(1700,2000,31)
# a

dfX = dfX[[1900., 1902., 1904., 1906., 1908., 1910., 1912., 1914., 1916.,
           1918., 1920., 1922., 1924., 1926., 1928., 1930., 1932., 1934.,
           1936., 1938., 1940., 1942., 1944., 1946., 1948., 1950., 1952.,
           1954., 1956., 1958., 1960., 1962., 1964., 1966., 1968., 1970.,
           1972., 1974., 1976., 1978., 1980., 1982., 1984., 1986., 1988.,
           1990., 1992., 1994., 1996., 1998., 2000.]]

dfX['Total'] = dfX.sum(axis=1)
dfX = dfX.sort_values(by='Total', ascending=False)
# dfX = dfX.reset_index()
# dfX = dfX[dfX.index <= 5000]
dfX = dfX.drop(['Total'], axis=1)

dfX.to_csv(r'C:\Users\Victor\Desktop\1 Gram Data\The Array.csv')

dfX

